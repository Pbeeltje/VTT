@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Components
@implements IAsyncDisposable

<div class="game-container">
    <div class="main-content">
        <div class="image-container">
            <img src="@CurrentImage" alt="Current Dungeon Scene">
        </div>
    </div>

    <div class="sidebar">
        <nav class="nav-bar">
            <a href="game">Game</a>
        </nav>
        <div class="chat-area">
            <h4>Chat</h4>
            <div class="chat-messages">
                @foreach (var message in ChatMessages)
                {
                    <div class="@(message.IsSystemMessage ? "system-message" : "user-message")">
                        <span>@message.UserName: </span>
                        <span>@message.Text</span>
                    </div>
                }
            </div>
            <div class="chat-input">
                <input @bind="NewMessage" placeholder="Type your message..." />
                <button @onclick="SendMessage" disabled="@(!IsConnected)">Send</button>
            </div>
        </div>
    </div>

    <div class="dice-rolling">
        @if (IsDM)
        {
            <InputFile OnChange="@LoadFile" accept="image/*" class="upload-button" />
        }
        <div class="dice-buttons">
            <button @onclick="() => RollDice(4)">d4</button>
            <button @onclick="() => RollDice(6)">d6</button>
            <button @onclick="() => RollDice(8)">d8</button>
            <button @onclick="() => RollDice(10)">d10</button>
            <button @onclick="() => RollDice(12)">d12</button>
            <button @onclick="() => RollDice(20)">d20</button>
        </div>
    </div>
</div>

@code {
    @inject NavigationManager NavigationManager
    private class ChatMessage
    {
        public string UserName { get; set; } = "User";
        public string Text { get; set; }
        public bool IsSystemMessage { get; set; }
    }

    private HubConnection hubConnection;
    private List<ChatMessage> ChatMessages = new List<ChatMessage>();
    private string NewMessage = "";
    private string UserName = "Anonymous"; // You might want to get this from user input or auth

    private bool IsDM = true; // This should be set based on user authentication or game state
    private IBrowserFile loadedFile;

    private async Task LoadFile(InputFileChangeEventArgs e)
    {
        loadedFile = e.File;
        var buffer = new byte[loadedFile.Size];
        await loadedFile.OpenReadStream().ReadAsync(buffer);

        var imageType = loadedFile.ContentType;
        var base64 = Convert.ToBase64String(buffer);
        CurrentImage = $"data:{imageType};base64,{base64}";

        // If you need to persist this image or share it with others, you would need to handle file storage here
        // For simplicity, we'll just update the image in memory
    }


    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri("/chatHub"))
        .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            ChatMessages.Add(new ChatMessage { UserName = user, Text = message });
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;

    private async Task SendMessage()
    {
        if (IsConnected && !string.IsNullOrWhiteSpace(NewMessage))
        {
            await hubConnection.SendAsync("SendMessage", UserName, NewMessage);
            NewMessage = "";
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    private string CurrentImage = "/images/default.png"; // Default image path

    private async Task RollDice(int dice)
    {
        var result = new Random().Next(1, dice + 1);
        await hubConnection.SendAsync("SendMessage", "System", $"Rolled a d{dice}: {result}");
    }
}

<style>
    .game-container {
        display: flex;
        flex-direction: column;
        height: 100%;
        min-height: 100vh;
        position: relative;
    }

    .main-content {
        flex: 1;
        margin-right: 250px; /* Width of sidebar */
        overflow: hidden;
        position: relative;
    }

    .image-container {
        width: 100%;
        height: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
    }

        .image-container img {
            max-width: 100%;
            max-height: 100%;
            object-fit: contain;
        }

    .sidebar {
        position: fixed;
        top: 0;
        right: 0;
        width: 250px;
        height: 100%;
        display: flex;
        flex-direction: column;
        border-left: 1px solid #ccc;
        background-color: #f8f9fa;
    }

    .nav-bar {
        padding: 10px;
        border-bottom: 1px solid #ccc;
    }

        .nav-bar a {
            display: block;
            color: #007bff;
            text-decoration: none;
            margin-bottom: 5px;
        }

    .chat-area {
        flex: 1;
        display: flex;
        flex-direction: column;
        overflow: hidden;
    }

    .chat-messages {
        flex: 1;
        overflow-y: auto;
        padding: 10px;
    }

    .chat-input {
        padding: 10px;
        display: flex;
        gap: 8px;
        background-color: #fff;
        border-top: 1px solid #ccc;
    }

        .chat-input input {
            flex: 1;
            padding: 6px;
        }

        .chat-input button {
            padding: 6px 12px;
        }

    .dice-rolling {
        position: fixed;
        bottom: 0;
        left: 0;
        right: 250px; /* Width of sidebar */
        height: 60px;
        display: flex;
        justify-content: flex-start;
        align-items: center;
        padding: 0 16px;
        background-color: #f8f9fa;
        border-top: 1px solid #ccc;
        z-index: 1000;
    }

    .dice-buttons {
        display: flex;
        gap: 8px;
    }

    .dice-rolling button {
        padding: 6px 12px;
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

        .dice-rolling button:hover {
            background-color: #0056b3;
        }

    .upload-button {
        margin-right: 16px;
    }

    .system-message {
        color: #666;
        font-style: italic;
    }

    .user-message {
        color: #000;
    }
</style>